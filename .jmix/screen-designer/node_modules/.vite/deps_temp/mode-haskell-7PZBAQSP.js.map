{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-haskell.js"],
  "sourcesContent": ["ace.define(\"ace/mode/haskell_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\haskell.tmbundle\\Syntaxes\\Haskell.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar HaskellHighlightRules = function () {\n    this.$rules = { start: [{ token: ['punctuation.definition.entity.haskell',\n                    'keyword.operator.function.infix.haskell',\n                    'punctuation.definition.entity.haskell'],\n                regex: '(`)([a-zA-Z_\\']*?)(`)',\n                comment: 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).' },\n            { token: 'constant.language.unit.haskell', regex: '\\\\(\\\\)' },\n            { token: 'constant.language.empty-list.haskell',\n                regex: '\\\\[\\\\]' },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(module|signature)\\\\b',\n                push: [{ token: 'keyword.other.haskell', regex: '\\\\bwhere\\\\b', next: 'pop' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { token: 'invalid', regex: '[a-z]+' },\n                    { defaultToken: 'meta.declaration.module.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\bclass\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b',\n                        next: 'pop' },\n                    { token: 'support.class.prelude.haskell',\n                        regex: '\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '[A-Z][A-Za-z_\\']*' },\n                    { token: 'variable.other.generic-type.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n                    { defaultToken: 'meta.declaration.class.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\binstance\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b|$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.declaration.instance.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: 'import',\n                push: [{ token: 'meta.import.haskell', regex: '$|;|^', next: 'pop' },\n                    { token: 'keyword.other.haskell', regex: 'qualified|as|hiding' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { defaultToken: 'meta.import.haskell' }] },\n            { token: ['keyword.other.haskell', 'meta.deriving.haskell'],\n                regex: '(deriving)(\\\\s*\\\\()',\n                push: [{ token: 'meta.deriving.haskell', regex: '\\\\)', next: 'pop' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '\\\\b[A-Z][a-zA-Z_\\']*' },\n                    { defaultToken: 'meta.deriving.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b' },\n            { token: 'keyword.operator.haskell', regex: '\\\\binfix[lr]?\\\\b' },\n            { token: 'keyword.control.haskell',\n                regex: '\\\\b(?:do|if|then|else)\\\\b' },\n            { token: 'constant.numeric.float.haskell',\n                regex: '\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b',\n                comment: 'Floats are always decimal' },\n            { token: 'constant.numeric.haskell',\n                regex: '\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b' },\n            { token: ['meta.preprocessor.c',\n                    'punctuation.definition.preprocessor.c',\n                    'meta.preprocessor.c'],\n                regex: '^(\\\\s*)(#)(\\\\s*\\\\w+)',\n                comment: 'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.' },\n            { include: '#pragma' },\n            { token: 'punctuation.definition.string.begin.haskell',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.haskell',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: 'constant.character.escape.haskell',\n                        regex: '\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&])' },\n                    { token: 'constant.character.escape.octal.haskell',\n                        regex: '\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+' },\n                    { token: 'constant.character.escape.control.haskell',\n                        regex: '\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]' },\n                    { defaultToken: 'string.quoted.double.haskell' }] },\n            { token: ['punctuation.definition.string.begin.haskell',\n                    'string.quoted.single.haskell',\n                    'constant.character.escape.haskell',\n                    'constant.character.escape.octal.haskell',\n                    'constant.character.escape.hexadecimal.haskell',\n                    'constant.character.escape.control.haskell',\n                    'punctuation.definition.string.end.haskell'],\n                regex: '(\\')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(\\')' },\n            { token: ['meta.function.type-declaration.haskell',\n                    'entity.name.function.haskell',\n                    'meta.function.type-declaration.haskell',\n                    'keyword.other.double-colon.haskell'],\n                regex: '^(\\\\s*)([a-z_][a-zA-Z0-9_\\']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)',\n                push: [{ token: 'meta.function.type-declaration.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.function.type-declaration.haskell' }] },\n            { token: 'support.constant.haskell',\n                regex: '\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b' },\n            { token: 'constant.other.haskell', regex: '\\\\b[A-Z]\\\\w*\\\\b' },\n            { include: '#comments' },\n            { token: 'support.function.prelude.haskell',\n                regex: '\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b' },\n            { include: '#infix_op' },\n            { token: 'keyword.operator.haskell',\n                regex: '[|!%$?~+:\\\\-.=</>\\\\\\\\]+',\n                comment: 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.' },\n            { token: 'punctuation.separator.comma.haskell', regex: ',' }],\n        '#block_comment': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '\\\\{-(?!#)',\n                push: [{ include: '#block_comment' },\n                    { token: 'punctuation.definition.comment.haskell',\n                        regex: '-\\\\}',\n                        next: 'pop' },\n                    { defaultToken: 'comment.block.haskell' }] }],\n        '#comments': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '--.*',\n                push_: [{ token: 'comment.line.double-dash.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.double-dash.haskell' }] },\n            { include: '#block_comment' }],\n        '#infix_op': [{ token: 'entity.name.function.infix.haskell',\n                regex: '\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)' }],\n        '#module_exports': [{ token: 'meta.declaration.exports.haskell',\n                regex: '\\\\(',\n                push: [{ token: 'meta.declaration.exports.haskell.end',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: 'entity.name.function.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z_\\']*' },\n                    { token: 'storage.type.haskell', regex: '\\\\b[A-Z][A-Za-z_\\']*' },\n                    { token: 'punctuation.separator.comma.haskell', regex: ',' },\n                    { include: '#infix_op' },\n                    { token: 'meta.other.unknown.haskell',\n                        regex: '\\\\(.*?\\\\)',\n                        comment: 'So named because I don\\'t know what to call this.' },\n                    { defaultToken: 'meta.declaration.exports.haskell.end' }] }],\n        '#module_name': [{ token: 'support.other.module.haskell',\n                regex: '[A-Z][A-Za-z._\\']*' }],\n        '#pragma': [{ token: 'meta.preprocessor.haskell',\n                regex: '\\\\{-#',\n                push: [{ token: 'meta.preprocessor.haskell',\n                        regex: '#-\\\\}',\n                        next: 'pop' },\n                    { token: 'keyword.other.preprocessor.haskell',\n                        regex: '\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b' },\n                    { defaultToken: 'meta.preprocessor.haskell' }] }],\n        '#type_signature': [{ token: ['meta.class-constraint.haskell',\n                    'entity.other.inherited-class.haskell',\n                    'meta.class-constraint.haskell',\n                    'variable.other.generic-type.haskell',\n                    'meta.class-constraint.haskell',\n                    'keyword.other.big-arrow.haskell'],\n                regex: '(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_\\']*)(\\\\)\\\\s*)(=>)' },\n            { include: '#pragma' },\n            { token: 'keyword.other.arrow.haskell', regex: '->' },\n            { token: 'keyword.other.big-arrow.haskell', regex: '=>' },\n            { token: 'support.type.prelude.haskell',\n                regex: '\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b' },\n            { token: 'variable.other.generic-type.haskell',\n                regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'storage.type.haskell',\n                regex: '\\\\b[A-Z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'support.constant.unit.haskell', regex: '\\\\(\\\\)' },\n            { include: '#comments' }] };\n    this.normalizeRules();\n};\nHaskellHighlightRules.metaData = { fileTypes: ['hs'],\n    keyEquivalent: '^~H',\n    name: 'Haskell',\n    scopeName: 'source.haskell' };\noop.inherits(HaskellHighlightRules, TextHighlightRules);\nexports.HaskellHighlightRules = HaskellHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HaskellHighlightRules = require(\"./haskell_highlight_rules\").HaskellHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = HaskellHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell\";\n    this.snippetFileId = \"ace/snippets/haskell\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/haskell\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": ";;;;;AAAA;AAAA;AAAA,QAAI,OAAO,oCAAmC,CAAC,WAAU,WAAU,UAAS,eAAc,+BAA+B,GAAG,SAASA,UAASC,UAASC,SAAO;AAC9J;AACA,UAAI,MAAMF,SAAQ,YAAY;AAC9B,UAAI,qBAAqBA,SAAQ,wBAAwB,EAAE;AAC3D,UAAI,wBAAwB,WAAY;AACpC,aAAK,SAAS;AAAA,UAAE,OAAO;AAAA,YAAC;AAAA,cAAE,OAAO;AAAA,gBAAC;AAAA,gBAClB;AAAA,gBACA;AAAA,cAAuC;AAAA,cAC3C,OAAO;AAAA,cACP,SAAS;AAAA,YAAiM;AAAA,YAC9M,EAAE,OAAO,kCAAkC,OAAO,SAAS;AAAA,YAC3D;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAAS;AAAA,YACpB;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC,EAAE,OAAO,yBAAyB,OAAO,eAAe,MAAM,MAAM;AAAA,gBACvE,EAAE,SAAS,eAAe;AAAA,gBAC1B,EAAE,SAAS,kBAAkB;AAAA,gBAC7B,EAAE,OAAO,WAAW,OAAO,SAAS;AAAA,gBACpC,EAAE,cAAc,kCAAkC;AAAA,cAAC;AAAA,YAAE;AAAA,YAC7D;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC;AAAA,kBAAE,OAAO;AAAA,kBACR,OAAO;AAAA,kBACP,MAAM;AAAA,gBAAM;AAAA,gBAChB;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAAoH;AAAA,gBAC/H;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAAoB;AAAA,gBAC/B;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAA6B;AAAA,gBACxC,EAAE,cAAc,iCAAiC;AAAA,cAAC;AAAA,YAAE;AAAA,YAC5D;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC;AAAA,kBAAE,OAAO;AAAA,kBACR,OAAO;AAAA,kBACP,MAAM;AAAA,gBAAM;AAAA,gBAChB,EAAE,SAAS,kBAAkB;AAAA,gBAC7B,EAAE,cAAc,oCAAoC;AAAA,cAAC;AAAA,YAAE;AAAA,YAC/D;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC,EAAE,OAAO,uBAAuB,OAAO,SAAS,MAAM,MAAM;AAAA,gBAC/D,EAAE,OAAO,yBAAyB,OAAO,sBAAsB;AAAA,gBAC/D,EAAE,SAAS,eAAe;AAAA,gBAC1B,EAAE,SAAS,kBAAkB;AAAA,gBAC7B,EAAE,cAAc,sBAAsB;AAAA,cAAC;AAAA,YAAE;AAAA,YACjD;AAAA,cAAE,OAAO,CAAC,yBAAyB,uBAAuB;AAAA,cACtD,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC,EAAE,OAAO,yBAAyB,OAAO,OAAO,MAAM,MAAM;AAAA,gBAC/D;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAAuB;AAAA,gBAClC,EAAE,cAAc,wBAAwB;AAAA,cAAC;AAAA,YAAE;AAAA,YACnD;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAAoE;AAAA,YAC/E,EAAE,OAAO,4BAA4B,OAAO,mBAAmB;AAAA,YAC/D;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAA4B;AAAA,YACvC;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,SAAS;AAAA,YAA4B;AAAA,YACzC;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAAoD;AAAA,YAC/D;AAAA,cAAE,OAAO;AAAA,gBAAC;AAAA,gBACF;AAAA,gBACA;AAAA,cAAqB;AAAA,cACzB,OAAO;AAAA,cACP,SAAS;AAAA,YAAwG;AAAA,YACrH,EAAE,SAAS,UAAU;AAAA,YACrB;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC;AAAA,kBAAE,OAAO;AAAA,kBACR,OAAO;AAAA,kBACP,MAAM;AAAA,gBAAM;AAAA,gBAChB;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAA0J;AAAA,gBACrK;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAA2C;AAAA,gBACtD;AAAA,kBAAE,OAAO;AAAA,kBACL,OAAO;AAAA,gBAA0B;AAAA,gBACrC,EAAE,cAAc,+BAA+B;AAAA,cAAC;AAAA,YAAE;AAAA,YAC1D;AAAA,cAAE,OAAO;AAAA,gBAAC;AAAA,gBACF;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cAA2C;AAAA,cAC/C,OAAO;AAAA,YAAqP;AAAA,YAChQ;AAAA,cAAE,OAAO;AAAA,gBAAC;AAAA,gBACF;AAAA,gBACA;AAAA,gBACA;AAAA,cAAoC;AAAA,cACxC,OAAO;AAAA,cACP,MAAM;AAAA,gBAAC;AAAA,kBAAE,OAAO;AAAA,kBACR,OAAO;AAAA,kBACP,MAAM;AAAA,gBAAM;AAAA,gBAChB,EAAE,SAAS,kBAAkB;AAAA,gBAC7B,EAAE,cAAc,yCAAyC;AAAA,cAAC;AAAA,YAAE;AAAA,YACpE;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAAsE;AAAA,YACjF,EAAE,OAAO,0BAA0B,OAAO,kBAAkB;AAAA,YAC5D,EAAE,SAAS,YAAY;AAAA,YACvB;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAAgvC;AAAA,YAC3vC,EAAE,SAAS,YAAY;AAAA,YACvB;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,cACP,SAAS;AAAA,YAA8K;AAAA,YAC3L,EAAE,OAAO,uCAAuC,OAAO,IAAI;AAAA,UAAC;AAAA,UAChE,kBAAkB,CAAC;AAAA,YAAE,OAAO;AAAA,YACpB,OAAO;AAAA,YACP,MAAM;AAAA,cAAC,EAAE,SAAS,iBAAiB;AAAA,cAC/B;AAAA,gBAAE,OAAO;AAAA,gBACL,OAAO;AAAA,gBACP,MAAM;AAAA,cAAM;AAAA,cAChB,EAAE,cAAc,wBAAwB;AAAA,YAAC;AAAA,UAAE,CAAC;AAAA,UACxD,aAAa;AAAA,YAAC;AAAA,cAAE,OAAO;AAAA,cACf,OAAO;AAAA,cACP,OAAO;AAAA,gBAAC;AAAA,kBAAE,OAAO;AAAA,kBACT,OAAO;AAAA,kBACP,MAAM;AAAA,gBAAM;AAAA,gBAChB,EAAE,cAAc,mCAAmC;AAAA,cAAC;AAAA,YAAE;AAAA,YAC9D,EAAE,SAAS,iBAAiB;AAAA,UAAC;AAAA,UACjC,aAAa,CAAC;AAAA,YAAE,OAAO;AAAA,YACf,OAAO;AAAA,UAAmC,CAAC;AAAA,UACnD,mBAAmB,CAAC;AAAA,YAAE,OAAO;AAAA,YACrB,OAAO;AAAA,YACP,MAAM;AAAA,cAAC;AAAA,gBAAE,OAAO;AAAA,gBACR,OAAO;AAAA,gBACP,MAAM;AAAA,cAAM;AAAA,cAChB;AAAA,gBAAE,OAAO;AAAA,gBACL,OAAO;AAAA,cAAuB;AAAA,cAClC,EAAE,OAAO,wBAAwB,OAAO,sBAAuB;AAAA,cAC/D,EAAE,OAAO,uCAAuC,OAAO,IAAI;AAAA,cAC3D,EAAE,SAAS,YAAY;AAAA,cACvB;AAAA,gBAAE,OAAO;AAAA,gBACL,OAAO;AAAA,gBACP,SAAS;AAAA,cAAoD;AAAA,cACjE,EAAE,cAAc,uCAAuC;AAAA,YAAC;AAAA,UAAE,CAAC;AAAA,UACvE,gBAAgB,CAAC;AAAA,YAAE,OAAO;AAAA,YAClB,OAAO;AAAA,UAAqB,CAAC;AAAA,UACrC,WAAW,CAAC;AAAA,YAAE,OAAO;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,cAAC;AAAA,gBAAE,OAAO;AAAA,gBACR,OAAO;AAAA,gBACP,MAAM;AAAA,cAAM;AAAA,cAChB;AAAA,gBAAE,OAAO;AAAA,gBACL,OAAO;AAAA,cAAmC;AAAA,cAC9C,EAAE,cAAc,4BAA4B;AAAA,YAAC;AAAA,UAAE,CAAC;AAAA,UAC5D,mBAAmB;AAAA,YAAC;AAAA,cAAE,OAAO;AAAA,gBAAC;AAAA,gBAClB;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cAAiC;AAAA,cACrC,OAAO;AAAA,YAAkE;AAAA,YAC7E,EAAE,SAAS,UAAU;AAAA,YACrB,EAAE,OAAO,+BAA+B,OAAO,KAAK;AAAA,YACpD,EAAE,OAAO,mCAAmC,OAAO,KAAK;AAAA,YACxD;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAA+G;AAAA,YAC1H;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAA6B;AAAA,YACxC;AAAA,cAAE,OAAO;AAAA,cACL,OAAO;AAAA,YAA6B;AAAA,YACxC,EAAE,OAAO,iCAAiC,OAAO,SAAS;AAAA,YAC1D,EAAE,SAAS,YAAY;AAAA,UAAC;AAAA,QAAE;AAClC,aAAK,eAAe;AAAA,MACxB;AACA,4BAAsB,WAAW;AAAA,QAAE,WAAW,CAAC,IAAI;AAAA,QAC/C,eAAe;AAAA,QACf,MAAM;AAAA,QACN,WAAW;AAAA,MAAiB;AAChC,UAAI,SAAS,uBAAuB,kBAAkB;AACtD,MAAAC,SAAQ,wBAAwB;AAAA,IAEhC,CAAC;AAED,QAAI,OAAO,2BAA0B,CAAC,WAAU,WAAU,UAAS,eAAc,aAAY,4BAA4B,GAAG,SAASD,UAASC,UAASC,SAAO;AAAC;AAC/J,UAAI,MAAMF,SAAQ,eAAe;AACjC,UAAI,QAAQA,SAAQ,aAAa,EAAE;AACnC,UAAI,eAAeA,SAAQ,aAAa,EAAE;AAC1C,UAAI,WAAWC,SAAQ,WAAW,SAAU,cAAc;AACtD,YAAI,cAAc;AACd,eAAK,qBAAqB,IAAI,OAAO,KAAK,mBAAmB,OAAO,QAAQ,aAAa,MAAM,aAAa,KAAK,CAAC;AAClH,eAAK,oBAAoB,IAAI,OAAO,KAAK,kBAAkB,OAAO,QAAQ,aAAa,MAAM,aAAa,GAAG,CAAC;AAAA,QAClH;AAAA,MACJ;AACA,UAAI,SAAS,UAAU,YAAY;AACnC,OAAC,WAAY;AACT,aAAK,qBAAqB;AAC1B,aAAK,oBAAoB;AACzB,aAAK,2BAA2B;AAChC,aAAK,2BAA2B;AAChC,aAAK,gBAAgB;AACrB,aAAK,qBAAqB,KAAK;AAC/B,aAAK,gBAAgB,SAAU,SAAS,WAAW,KAAK;AACpD,cAAI,OAAO,QAAQ,QAAQ,GAAG;AAC9B,cAAI,KAAK,yBAAyB,KAAK,IAAI,GAAG;AAC1C,gBAAI,CAAC,KAAK,cAAc,KAAK,IAAI,KAAK,CAAC,KAAK,yBAAyB,KAAK,IAAI;AAC1E,qBAAO;AAAA,UACf;AACA,cAAI,KAAK,KAAK,mBAAmB,SAAS,WAAW,GAAG;AACxD,cAAI,CAAC,MAAM,KAAK,cAAc,KAAK,IAAI;AACnC,mBAAO;AACX,iBAAO;AAAA,QACX;AACA,aAAK,qBAAqB,SAAU,SAAS,WAAW,KAAK,gBAAgB;AACzE,cAAI,OAAO,QAAQ,QAAQ,GAAG;AAC9B,cAAI,KAAK,cAAc,KAAK,IAAI;AAC5B,mBAAO,KAAK,sBAAsB,SAAS,MAAM,GAAG;AACxD,cAAI,QAAQ,KAAK,MAAM,KAAK,kBAAkB;AAC9C,cAAI,OAAO;AACP,gBAAI,IAAI,MAAM;AACd,gBAAI,MAAM,CAAC;AACP,qBAAO,KAAK,oBAAoB,SAAS,MAAM,CAAC,GAAG,KAAK,CAAC;AAC7D,gBAAI,QAAQ,QAAQ,oBAAoB,KAAK,IAAI,MAAM,CAAC,EAAE,QAAQ,CAAC;AACnE,gBAAI,SAAS,CAAC,MAAM,YAAY,GAAG;AAC/B,kBAAI,gBAAgB;AAChB,wBAAQ,KAAK,gBAAgB,SAAS,GAAG;AAAA,cAC7C,WACS,aAAa;AAClB,wBAAQ;AAAA,YAChB;AACA,mBAAO;AAAA,UACX;AACA,cAAI,cAAc;AACd;AACJ,cAAI,QAAQ,KAAK,MAAM,KAAK,iBAAiB;AAC7C,cAAI,OAAO;AACP,gBAAI,IAAI,MAAM,QAAQ,MAAM,CAAC,EAAE;AAC/B,gBAAI,MAAM,CAAC;AACP,qBAAO,KAAK,oBAAoB,SAAS,MAAM,CAAC,GAAG,KAAK,CAAC;AAC7D,mBAAO,QAAQ,oBAAoB,KAAK,GAAG,EAAE;AAAA,UACjD;AAAA,QACJ;AACA,aAAK,kBAAkB,SAAU,SAAS,KAAK;AAC3C,cAAI,OAAO,QAAQ,QAAQ,GAAG;AAC9B,cAAI,cAAc,KAAK,OAAO,IAAI;AAClC,cAAI,WAAW;AACf,cAAI,cAAc,KAAK;AACvB,gBAAM,MAAM;AACZ,cAAI,SAAS;AACb,cAAI,SAAS,QAAQ,UAAU;AAC/B,iBAAO,EAAE,MAAM,QAAQ;AACnB,mBAAO,QAAQ,QAAQ,GAAG;AAC1B,gBAAI,SAAS,KAAK,OAAO,IAAI;AAC7B,gBAAI,WAAW;AACX;AACJ,gBAAI,cAAc;AACd;AACJ,gBAAI,WAAW,KAAK,mBAAmB,SAAS,OAAO,GAAG;AAC1D,gBAAI,UAAU;AACV,kBAAI,SAAS,MAAM,OAAO,UAAU;AAChC;AAAA,cACJ,WACS,SAAS,YAAY,GAAG;AAC7B,sBAAM,SAAS,IAAI;AAAA,cACvB,WACS,eAAe,QAAQ;AAC5B;AAAA,cACJ;AAAA,YACJ;AACA,qBAAS;AAAA,UACb;AACA,iBAAO,IAAI,MAAM,UAAU,aAAa,QAAQ,QAAQ,QAAQ,MAAM,EAAE,MAAM;AAAA,QAClF;AACA,aAAK,wBAAwB,SAAU,SAAS,MAAM,KAAK;AACvD,cAAI,cAAc,KAAK,OAAO,MAAM;AACpC,cAAI,SAAS,QAAQ,UAAU;AAC/B,cAAI,WAAW;AACf,cAAI,KAAK;AACT,cAAI,QAAQ;AACZ,iBAAO,EAAE,MAAM,QAAQ;AACnB,mBAAO,QAAQ,QAAQ,GAAG;AAC1B,gBAAI,IAAI,GAAG,KAAK,IAAI;AACpB,gBAAI,CAAC;AACD;AACJ,gBAAI,EAAE,CAAC;AACH;AAAA;AAEA;AACJ,gBAAI,CAAC;AACD;AAAA,UACR;AACA,cAAI,SAAS;AACb,cAAI,SAAS,UAAU;AACnB,mBAAO,IAAI,MAAM,UAAU,aAAa,QAAQ,KAAK,MAAM;AAAA,UAC/D;AAAA,QACJ;AAAA,MACJ,GAAG,KAAK,SAAS,SAAS;AAAA,IAE1B,CAAC;AAED,QAAI,OAAO,oBAAmB,CAAC,WAAU,WAAU,UAAS,eAAc,iBAAgB,oCAAmC,yBAAyB,GAAG,SAASD,UAASC,UAASC,SAAO;AAG3L;AACA,UAAI,MAAMF,SAAQ,YAAY;AAC9B,UAAI,WAAWA,SAAQ,QAAQ,EAAE;AACjC,UAAI,wBAAwBA,SAAQ,2BAA2B,EAAE;AACjE,UAAI,WAAWA,SAAQ,kBAAkB,EAAE;AAC3C,UAAI,OAAO,WAAY;AACnB,aAAK,iBAAiB;AACtB,aAAK,eAAe,IAAI,SAAS;AACjC,aAAK,aAAa,KAAK;AAAA,MAC3B;AACA,UAAI,SAAS,MAAM,QAAQ;AAC3B,OAAC,WAAY;AACT,aAAK,mBAAmB;AACxB,aAAK,eAAe;AACpB,aAAK,MAAM;AACX,aAAK,gBAAgB;AAAA,MACzB,GAAG,KAAK,KAAK,SAAS;AACtB,MAAAC,SAAQ,OAAO;AAAA,IAEf,CAAC;AAAkB,KAAC,WAAW;AACX,UAAI,QAAQ,CAAC,kBAAkB,GAAG,SAAS,GAAG;AAC1C,YAAI,OAAO,UAAU,YAAY,OAAO,WAAW,YAAY,QAAQ;AACnE,iBAAO,UAAU;AAAA,QACrB;AAAA,MACJ,CAAC;AAAA,IACL,GAAG;AAAA;AAAA;",
  "names": ["require", "exports", "module"]
}
