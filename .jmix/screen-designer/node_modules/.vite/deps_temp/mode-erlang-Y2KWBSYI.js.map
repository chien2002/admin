{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-erlang.js"],
  "sourcesContent": ["ace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\erlang.tmbundle\\Syntaxes\\Erlang.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ErlangHighlightRules = function () {\n    this.$rules = { start: [{ include: '#module-directive' },\n            { include: '#import-export-directive' },\n            { include: '#behaviour-directive' },\n            { include: '#record-directive' },\n            { include: '#define-directive' },\n            { include: '#macro-directive' },\n            { include: '#directive' },\n            { include: '#function' },\n            { include: '#everything-else' }],\n        '#atom': [{ token: 'punctuation.definition.symbol.begin.erlang',\n                regex: '\\'',\n                push: [{ token: 'punctuation.definition.symbol.end.erlang',\n                        regex: '\\'',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'constant.other.symbol.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { defaultToken: 'constant.other.symbol.quoted.single.erlang' }] },\n            { token: 'constant.other.symbol.unquoted.erlang',\n                regex: '[a-z][a-zA-Z\\\\d@_]*' }],\n        '#behaviour-directive': [{ token: ['meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'keyword.control.directive.behaviour.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'entity.name.type.class.behaviour.definition.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#binary': [{ token: 'punctuation.definition.binary.begin.erlang',\n                regex: '<<',\n                push: [{ token: 'punctuation.definition.binary.end.erlang',\n                        regex: '>>',\n                        next: 'pop' },\n                    { token: ['punctuation.separator.binary.erlang',\n                            'punctuation.separator.value-size.erlang'],\n                        regex: '(,)|(:)' },\n                    { include: '#internal-type-specifiers' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.binary.erlang' }] }],\n        '#character': [{ token: ['punctuation.definition.character.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'constant.character.escape.erlang'],\n                regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n            { token: 'invalid.illegal.character.erlang',\n                regex: '\\\\$\\\\\\\\\\\\^?.?' },\n            { token: ['punctuation.definition.character.erlang',\n                    'constant.character.erlang'],\n                regex: '(\\\\$)(\\\\S)' },\n            { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' }],\n        '#comment': [{ token: 'punctuation.definition.comment.erlang',\n                regex: '%.*$',\n                push_: [{ token: 'comment.line.percentage.erlang',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.percentage.erlang' }] }],\n        '#define-directive': [{ token: ['meta.directive.define.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'keyword.control.directive.define.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'entity.name.function.macro.definition.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] },\n            { token: 'meta.directive.define.erlang',\n                regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { token: ['text',\n                            'punctuation.section.directive.begin.erlang',\n                            'text',\n                            'keyword.control.directive.define.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang',\n                            'text',\n                            'entity.name.function.macro.definition.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n                        push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                                    'text',\n                                    'punctuation.separator.parameters.erlang'],\n                                regex: '(\\\\))(\\\\s*)(,)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.define.erlang',\n                        regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] }],\n        '#directive': [{ token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.erlang' }] },\n            { token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' }],\n        '#everything-else': [{ include: '#comment' },\n            { include: '#record-usage' },\n            { include: '#macro-usage' },\n            { include: '#expression' },\n            { include: '#keyword' },\n            { include: '#textual-operator' },\n            { include: '#function-call' },\n            { include: '#tuple' },\n            { include: '#list' },\n            { include: '#binary' },\n            { include: '#parenthesized-expression' },\n            { include: '#character' },\n            { include: '#number' },\n            { include: '#atom' },\n            { include: '#string' },\n            { include: '#symbolic-operator' },\n            { include: '#variable' }],\n        '#expression': [{ token: 'keyword.control.if.erlang',\n                regex: '\\\\bif\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.if.erlang' }] },\n            { token: 'keyword.control.case.erlang',\n                regex: '\\\\bcase\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.case.erlang' }] },\n            { token: 'keyword.control.receive.erlang',\n                regex: '\\\\breceive\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.receive.erlang' }] },\n            { token: ['keyword.control.fun.erlang',\n                    'text',\n                    'entity.name.type.class.module.erlang',\n                    'text',\n                    'punctuation.separator.module-function.erlang',\n                    'text',\n                    'entity.name.function.erlang',\n                    'text',\n                    'punctuation.separator.function-arity.erlang'],\n                regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\n            { token: 'keyword.control.fun.erlang',\n                regex: '\\\\bfun\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\bend\\\\b)',\n                                next: 'pop' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.fun.erlang' }] },\n            { token: 'keyword.control.try.erlang',\n                regex: '\\\\btry\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.try.erlang' }] },\n            { token: 'keyword.control.begin.erlang',\n                regex: '\\\\bbegin\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.begin.erlang' }] },\n            { token: 'keyword.control.query.erlang',\n                regex: '\\\\bquery\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.query.erlang' }] }],\n        '#function': [{ token: ['meta.function.erlang',\n                    'entity.name.function.definition.erlang',\n                    'meta.function.erlang'],\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n                push: [{ token: 'punctuation.terminator.function.erlang',\n                        regex: '\\\\.',\n                        next: 'pop' },\n                    { token: ['text', 'entity.name.function.erlang', 'text'],\n                        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\.)',\n                                next: 'pop' },\n                            { include: '#parenthesized-expression' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.function.erlang' }] }],\n        '#function-call': [{ token: 'meta.function-call.erlang',\n                regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n                push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.guard.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { defaultToken: 'meta.function-call.erlang' }] }],\n        '#import-export-directive': [{ token: ['meta.directive.import.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'entity.name.type.class.module.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.import.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.import.erlang' }] },\n            { token: ['meta.directive.export.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.export.erlang',\n                    'keyword.control.directive.export.erlang',\n                    'meta.directive.export.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.export.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.export.erlang' }] }],\n        '#internal-expression-punctuation': [{ token: ['punctuation.separator.clause-head-body.erlang',\n                    'punctuation.separator.clauses.erlang',\n                    'punctuation.separator.expressions.erlang'],\n                regex: '(->)|(;)|(,)' }],\n        '#internal-function-list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: ['entity.name.function.erlang',\n                            'text',\n                            'punctuation.separator.function-arity.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n                        push: [{ token: 'punctuation.separator.list.erlang',\n                                regex: ',|(?=\\\\])',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.function.erlang' }] }],\n        '#internal-function-parts': [{ token: 'text',\n                regex: '(?=\\\\()',\n                push: [{ token: 'punctuation.separator.clause-head-body.erlang',\n                        regex: '->',\n                        next: 'pop' },\n                    { token: 'punctuation.definition.parameters.begin.erlang',\n                        regex: '\\\\(',\n                        push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                                regex: '\\\\)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\n                    { include: '#everything-else' }] },\n            { token: 'punctuation.separator.expressions.erlang',\n                regex: ',' },\n            { include: '#everything-else' }],\n        '#internal-record-body': [{ token: 'punctuation.definition.class.record.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'meta.structure.record.erlang',\n                        regex: '(?=\\\\})',\n                        next: 'pop' },\n                    { token: ['variable.other.field.erlang',\n                            'variable.language.omitted.field.erlang',\n                            'text',\n                            'keyword.operator.assignment.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n                        push: [{ token: 'punctuation.separator.class.record.erlang',\n                                regex: ',|(?=\\\\})',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { token: ['variable.other.field.erlang',\n                            'text',\n                            'punctuation.separator.class.record.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.record.erlang' }] }],\n        '#internal-type-specifiers': [{ token: 'punctuation.separator.value-type.erlang',\n                regex: '/',\n                push: [{ token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\n                    { token: ['storage.type.erlang',\n                            'storage.modifier.signedness.erlang',\n                            'storage.modifier.endianness.erlang',\n                            'storage.modifier.unit.erlang',\n                            'punctuation.separator.type-specifiers.erlang'],\n                        regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' }] }],\n        '#keyword': [{ token: 'keyword.control.erlang',\n                regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' }],\n        '#list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.list.erlang',\n                        regex: '\\\\||\\\\|\\\\||,' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.erlang' }] }],\n        '#macro-directive': [{ token: ['meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'keyword.control.directive.ifdef.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'keyword.control.directive.ifndef.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.undef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'keyword.control.directive.undef.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#macro-usage': [{ token: ['keyword.operator.macro.erlang',\n                    'meta.macro-usage.erlang',\n                    'entity.name.function.macro.erlang'],\n                regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' }],\n        '#module-directive': [{ token: ['meta.directive.module.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'keyword.control.directive.module.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'entity.name.type.class.module.definition.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#number': [{ token: 'text',\n                regex: '(?=\\\\d)',\n                push: [{ token: 'text', regex: '(?!\\\\d)', next: 'pop' },\n                    { token: ['constant.numeric.float.erlang',\n                            'punctuation.separator.integer-float.erlang',\n                            'constant.numeric.float.erlang',\n                            'punctuation.separator.float-exponent.erlang'],\n                        regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\n                    { token: ['constant.numeric.integer.binary.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.binary.erlang'],\n                        regex: '(2)(#)([0-1]+)' },\n                    { token: ['constant.numeric.integer.base-3.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-3.erlang'],\n                        regex: '(3)(#)([0-2]+)' },\n                    { token: ['constant.numeric.integer.base-4.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-4.erlang'],\n                        regex: '(4)(#)([0-3]+)' },\n                    { token: ['constant.numeric.integer.base-5.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-5.erlang'],\n                        regex: '(5)(#)([0-4]+)' },\n                    { token: ['constant.numeric.integer.base-6.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-6.erlang'],\n                        regex: '(6)(#)([0-5]+)' },\n                    { token: ['constant.numeric.integer.base-7.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-7.erlang'],\n                        regex: '(7)(#)([0-6]+)' },\n                    { token: ['constant.numeric.integer.octal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.octal.erlang'],\n                        regex: '(8)(#)([0-7]+)' },\n                    { token: ['constant.numeric.integer.base-9.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-9.erlang'],\n                        regex: '(9)(#)([0-8]+)' },\n                    { token: ['constant.numeric.integer.decimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.decimal.erlang'],\n                        regex: '(10)(#)(\\\\d+)' },\n                    { token: ['constant.numeric.integer.base-11.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-11.erlang'],\n                        regex: '(11)(#)([\\\\daA]+)' },\n                    { token: ['constant.numeric.integer.base-12.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-12.erlang'],\n                        regex: '(12)(#)([\\\\da-bA-B]+)' },\n                    { token: ['constant.numeric.integer.base-13.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-13.erlang'],\n                        regex: '(13)(#)([\\\\da-cA-C]+)' },\n                    { token: ['constant.numeric.integer.base-14.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-14.erlang'],\n                        regex: '(14)(#)([\\\\da-dA-D]+)' },\n                    { token: ['constant.numeric.integer.base-15.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-15.erlang'],\n                        regex: '(15)(#)([\\\\da-eA-E]+)' },\n                    { token: ['constant.numeric.integer.hexadecimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.hexadecimal.erlang'],\n                        regex: '(16)(#)([\\\\da-fA-F]+)' },\n                    { token: ['constant.numeric.integer.base-17.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-17.erlang'],\n                        regex: '(17)(#)([\\\\da-gA-G]+)' },\n                    { token: ['constant.numeric.integer.base-18.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-18.erlang'],\n                        regex: '(18)(#)([\\\\da-hA-H]+)' },\n                    { token: ['constant.numeric.integer.base-19.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-19.erlang'],\n                        regex: '(19)(#)([\\\\da-iA-I]+)' },\n                    { token: ['constant.numeric.integer.base-20.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-20.erlang'],\n                        regex: '(20)(#)([\\\\da-jA-J]+)' },\n                    { token: ['constant.numeric.integer.base-21.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-21.erlang'],\n                        regex: '(21)(#)([\\\\da-kA-K]+)' },\n                    { token: ['constant.numeric.integer.base-22.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-22.erlang'],\n                        regex: '(22)(#)([\\\\da-lA-L]+)' },\n                    { token: ['constant.numeric.integer.base-23.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-23.erlang'],\n                        regex: '(23)(#)([\\\\da-mA-M]+)' },\n                    { token: ['constant.numeric.integer.base-24.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-24.erlang'],\n                        regex: '(24)(#)([\\\\da-nA-N]+)' },\n                    { token: ['constant.numeric.integer.base-25.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-25.erlang'],\n                        regex: '(25)(#)([\\\\da-oA-O]+)' },\n                    { token: ['constant.numeric.integer.base-26.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-26.erlang'],\n                        regex: '(26)(#)([\\\\da-pA-P]+)' },\n                    { token: ['constant.numeric.integer.base-27.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-27.erlang'],\n                        regex: '(27)(#)([\\\\da-qA-Q]+)' },\n                    { token: ['constant.numeric.integer.base-28.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-28.erlang'],\n                        regex: '(28)(#)([\\\\da-rA-R]+)' },\n                    { token: ['constant.numeric.integer.base-29.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-29.erlang'],\n                        regex: '(29)(#)([\\\\da-sA-S]+)' },\n                    { token: ['constant.numeric.integer.base-30.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-30.erlang'],\n                        regex: '(30)(#)([\\\\da-tA-T]+)' },\n                    { token: ['constant.numeric.integer.base-31.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-31.erlang'],\n                        regex: '(31)(#)([\\\\da-uA-U]+)' },\n                    { token: ['constant.numeric.integer.base-32.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-32.erlang'],\n                        regex: '(32)(#)([\\\\da-vA-V]+)' },\n                    { token: ['constant.numeric.integer.base-33.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-33.erlang'],\n                        regex: '(33)(#)([\\\\da-wA-W]+)' },\n                    { token: ['constant.numeric.integer.base-34.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-34.erlang'],\n                        regex: '(34)(#)([\\\\da-xA-X]+)' },\n                    { token: ['constant.numeric.integer.base-35.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-35.erlang'],\n                        regex: '(35)(#)([\\\\da-yA-Y]+)' },\n                    { token: ['constant.numeric.integer.base-36.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-36.erlang'],\n                        regex: '(36)(#)([\\\\da-zA-Z]+)' },\n                    { token: 'invalid.illegal.integer.erlang',\n                        regex: '\\\\d+#[\\\\da-zA-Z]+' },\n                    { token: 'constant.numeric.integer.decimal.erlang',\n                        regex: '\\\\d+' }] }],\n        '#parenthesized-expression': [{ token: 'punctuation.section.expression.begin.erlang',\n                regex: '\\\\(',\n                push: [{ token: 'punctuation.section.expression.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.parenthesized' }] }],\n        '#record-directive': [{ token: ['meta.directive.record.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'entity.name.type.class.record.definition.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.class.record.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.definition.parameters.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.directive.record.erlang' }] }],\n        '#record-usage': [{ token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang',\n                    'meta.record-usage.erlang',\n                    'punctuation.separator.record-field.erlang',\n                    'meta.record-usage.erlang',\n                    'variable.other.field.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\n            { token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n                push: [{ token: 'punctuation.definition.class.record.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.record-usage.erlang' }] }],\n        '#string': [{ token: 'punctuation.definition.string.begin.erlang',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.erlang',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'constant.character.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { token: ['punctuation.definition.placeholder.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'constant.other.placeholder.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'constant.other.placeholder.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'constant.other.placeholder.erlang',\n                            'constant.other.placeholder.erlang'],\n                        regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\n                    { token: ['punctuation.definition.placeholder.erlang',\n                            'punctuation.separator.placeholder-parts.erlang',\n                            'constant.other.placeholder.erlang',\n                            'constant.other.placeholder.erlang'],\n                        regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\n                    { token: 'invalid.illegal.string.erlang', regex: '~.?' },\n                    { defaultToken: 'string.quoted.double.erlang' }] }],\n        '#symbolic-operator': [{ token: 'keyword.operator.symbolic.erlang',\n                regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' }],\n        '#textual-operator': [{ token: 'keyword.operator.textual.erlang',\n                regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' }],\n        '#tuple': [{ token: 'punctuation.definition.tuple.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'punctuation.definition.tuple.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.tuple.erlang', regex: ',' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.tuple.erlang' }] }],\n        '#variable': [{ token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n                regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' }] };\n    this.normalizeRules();\n};\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang' };\noop.inherits(ErlangHighlightRules, TextHighlightRules);\nexports.ErlangHighlightRules = ErlangHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/erlang\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module"]
}
