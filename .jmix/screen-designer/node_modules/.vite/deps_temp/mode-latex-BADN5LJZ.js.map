{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-latex.js"],
  "sourcesContent": ["ace.define(\"ace/mode/latex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar LatexHighlightRules = function () {\n    this.$rules = {\n        \"start\": [{\n                token: \"comment\",\n                regex: \"%.*$\"\n            }, {\n                token: [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\", \"lparen\", \"storage.type\", \"rparen\"],\n                regex: \"(\\\\\\\\(?:documentclass|usepackage|input))(?:(\\\\[)([^\\\\]]*)(\\\\]))?({)([^}]*)(})\"\n            }, {\n                token: [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?\"\n            }, {\n                token: [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\begin)({)(verbatim)(})\",\n                next: \"verbatim\"\n            }, {\n                token: [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\begin)({)(lstlisting)(})\",\n                next: \"lstlisting\"\n            }, {\n                token: [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\(?:begin|end))({)([\\\\w*]*)(})\"\n            }, {\n                token: \"storage.type\",\n                regex: /\\\\verb\\b\\*?/,\n                next: [{\n                        token: [\"keyword.operator\", \"string\", \"keyword.operator\"],\n                        regex: \"(.)(.*?)(\\\\1|$)|\",\n                        next: \"start\"\n                    }]\n            }, {\n                token: \"storage.type\",\n                regex: \"\\\\\\\\[a-zA-Z]+\"\n            }, {\n                token: \"lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"constant.character.escape\",\n                regex: \"\\\\\\\\[^a-zA-Z]?\"\n            }, {\n                token: \"string\",\n                regex: \"\\\\${1,2}\",\n                next: \"equation\"\n            }],\n        \"equation\": [{\n                token: \"comment\",\n                regex: \"%.*$\"\n            }, {\n                token: \"string\",\n                regex: \"\\\\${1,2}\",\n                next: \"start\"\n            }, {\n                token: \"constant.character.escape\",\n                regex: \"\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)\"\n            }, {\n                token: \"error\",\n                regex: \"^\\\\s*$\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"verbatim\": [{\n                token: [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\end)({)(verbatim)(})\",\n                next: \"start\"\n            }, {\n                defaultToken: \"text\"\n            }],\n        \"lstlisting\": [{\n                token: [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n                regex: \"(\\\\\\\\end)({)(lstlisting)(})\",\n                next: \"start\"\n            }, {\n                defaultToken: \"text\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(LatexHighlightRules, TextHighlightRules);\nexports.LatexHighlightRules = LatexHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\nvar keywordLevels = {\n    \"\\\\subparagraph\": 1,\n    \"\\\\paragraph\": 2,\n    \"\\\\subsubsubsection\": 3,\n    \"\\\\subsubsection\": 4,\n    \"\\\\subsection\": 5,\n    \"\\\\section\": 6,\n    \"\\\\chapter\": 7,\n    \"\\\\part\": 8,\n    \"\\\\begin\": 9,\n    \"\\\\end\": 10\n};\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /^\\s*\\\\(begin)|\\s*\\\\(part|chapter|(?:sub)*(?:section|paragraph))\\b|{\\s*$/;\n    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            if (match[2])\n                return this.latexSection(session, row, match[0].length - 1);\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n    this.latexBlock = function (session, row, column, returnRange) {\n        var keywords = {\n            \"\\\\begin\": 1,\n            \"\\\\end\": -1\n        };\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n            return;\n        var val = token.value;\n        var dir = keywords[val];\n        var getType = function () {\n            var token = stream.stepForward();\n            var type = token && token.type == \"lparen\" ? stream.stepForward().value : \"\";\n            if (dir === -1) {\n                stream.stepBackward();\n                if (type)\n                    stream.stepBackward();\n            }\n            return type;\n        };\n        var stack = [getType()];\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while (token = stream.step()) {\n            if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n                continue;\n            var level = keywords[token.value];\n            if (!level)\n                continue;\n            var type = getType();\n            if (level === dir)\n                stack.unshift(type);\n            else if (stack.shift() !== type || !stack.length)\n                break;\n        }\n        if (stack.length)\n            return;\n        if (dir == 1) {\n            stream.stepBackward();\n            stream.stepBackward();\n        }\n        if (returnRange)\n            return stream.getCurrentTokenRange();\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        else\n            return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n    this.latexSection = function (session, row, column) {\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"storage.type\")\n            return;\n        var startLevel = keywordLevels[token.value] || 0;\n        var stackDepth = 0;\n        var endRow = row;\n        while (token = stream.stepForward()) {\n            if (token.type !== \"storage.type\")\n                continue;\n            var level = keywordLevels[token.value] || 0;\n            if (level >= 9) {\n                if (!stackDepth)\n                    endRow = stream.getCurrentTokenRow() - 1;\n                stackDepth += level == 9 ? 1 : -1;\n                if (stackDepth < 0)\n                    break;\n            }\n            else if (level >= startLevel)\n                break;\n        }\n        if (!stackDepth)\n            endRow = stream.getCurrentTokenRow() - 1;\n        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n            endRow--;\n        return new Range(row, session.getLine(row).length, endRow, session.getLine(endRow).length);\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/latex_highlight_rules\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/latex\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar LatexHighlightRules = require(\"./latex_highlight_rules\").LatexHighlightRules;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar LatexFoldMode = require(\"./folding/latex\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = LatexHighlightRules;\n    this.foldingRules = new LatexFoldMode();\n    this.$behaviour = new CstyleBehaviour({ braces: true });\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.type = \"text\";\n    this.lineCommentStart = \"%\";\n    this.$id = \"ace/mode/latex\";\n    this.getMatching = function (session, row, column) {\n        if (row == undefined)\n            row = session.selection.lead;\n        if (typeof row == \"object\") {\n            column = row.column;\n            row = row.row;\n        }\n        var startToken = session.getTokenAt(row, column);\n        if (!startToken)\n            return;\n        if (startToken.value == \"\\\\begin\" || startToken.value == \"\\\\end\") {\n            return this.foldingRules.latexBlock(session, row, column, true);\n        }\n    };\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/latex\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module", "token", "type"]
}
