{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-crystal.js"],
  "sourcesContent": ["ace.define(\"ace/mode/crystal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar CrystalHighlightRules = function () {\n    var builtinFunctions = (\"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\");\n    var keywords = (\"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\"\n        + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\"\n        + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\");\n    var buildinConstants = (\"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\");\n    var builtinVariables = (\"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" +\n        \"root_url|flash|session|cookies|params|request|response|logger|self\");\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants,\n        \"variable.language\": builtinVariables,\n        \"support.function\": builtinFunctions\n    }, \"identifier\");\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7]*)\";\n    var binNumber = \"(?:0[bB][01]+)\";\n    var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n    var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n    var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment\",\n                regex: \"#.*$\"\n            }, {\n                token: \"string.regexp\",\n                regex: \"[/]\",\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.regexp\",\n                        regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.regexp\"\n                    }]\n            },\n            [{\n                    regex: \"[{}]\", onMatch: function (val, state, stack) {\n                        this.next = val == \"{\" ? this.nextState : \"\";\n                        if (val == \"{\" && stack.length) {\n                            stack.unshift(\"start\", state);\n                            return \"paren.lparen\";\n                        }\n                        if (val == \"}\" && stack.length) {\n                            stack.shift();\n                            this.next = stack.shift();\n                            if (this.next.indexOf(\"string\") != -1)\n                                return \"paren.end\";\n                        }\n                        return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n                    },\n                    nextState: \"start\"\n                }, {\n                    token: \"string.start\",\n                    regex: /\"/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string\",\n                            regex: /\\\\#{/\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\"/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    token: \"string.start\",\n                    regex: /`/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string\",\n                            regex: /\\\\#{/\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /`/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"rpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\(/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /\\(/,\n                            push: \"rpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"spstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\[/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /\\[/,\n                            push: \"spstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /]/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"fpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?{/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /{/,\n                            push: \"fpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /}/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"tpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?</,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /</,\n                            push: \"tpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: />/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"ppstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\|/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\|/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"rpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\(/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /\\(/,\n                            push: \"rpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"spqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\[/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /\\[/,\n                            push: \"spqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /]/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"fpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]{/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /{/,\n                            push: \"fpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /}/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"tpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]</,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /</,\n                            push: \"tpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: />/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"ppqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\|/,\n                    push: [{\n                            token: \"string.end\",\n                            regex: /\\|/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    token: \"string.start\",\n                    regex: /'/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: escapeExpression\n                        }, {\n                            token: \"string.end\",\n                            regex: /'|$/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }], {\n                token: \"text\",\n                regex: \"::\"\n            }, {\n                token: \"variable.instance\",\n                regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"variable.fresh\",\n                regex: \"%[a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"support.class\",\n                regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"constant.other.symbol\",\n                regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n            }, {\n                token: \"constant.numeric\",\n                regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n            }, {\n                token: \"constant.numeric\",\n                regex: intNumber\n            }, {\n                token: \"constant.other.symbol\",\n                regex: ':\"',\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"constant.other.symbol\",\n                        regex: '\"',\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"constant.other.symbol\"\n                    }]\n            }, {\n                token: \"constant.language.boolean\",\n                regex: \"(?:true|false)\\\\b\"\n            }, {\n                token: \"support.function\",\n                regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n            }, {\n                token: \"variable.system\",\n                regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n            }, {\n                token: \"punctuation.separator.key-value\",\n                regex: \"=>\"\n            }, {\n                stateName: \"heredoc\",\n                onMatch: function (value, currentState, stack) {\n                    var next = \"heredoc\";\n                    var tokens = value.split(this.splitRegex);\n                    stack.push(next, tokens[3]);\n                    return [\n                        { type: \"constant\", value: tokens[1] },\n                        { type: \"string\", value: tokens[2] },\n                        { type: \"support.class\", value: tokens[3] },\n                        { type: \"string\", value: tokens[4] }\n                    ];\n                },\n                regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n                rules: {\n                    heredoc: [{\n                            token: \"string\",\n                            regex: \"^ +\"\n                        }, {\n                            onMatch: function (value, currentState, stack) {\n                                if (value === stack[1]) {\n                                    stack.shift();\n                                    stack.shift();\n                                    this.next = stack[0] || \"start\";\n                                    return \"support.class\";\n                                }\n                                this.next = \"\";\n                                return \"string\";\n                            },\n                            regex: \".*$\",\n                            next: \"start\"\n                        }]\n                }\n            }, {\n                regex: \"$\",\n                token: \"empty\",\n                next: function (currentState, stack) {\n                    if (stack[0] === \"heredoc\")\n                        return stack[0];\n                    return currentState;\n                }\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[.]\\s*(?![.])/,\n                push: [{\n                        token: \"punctuation.operator\",\n                        regex: /[.]\\s*(?![.])/\n                    }, {\n                        token: \"support.function\",\n                        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                    }, {\n                        regex: \"\",\n                        token: \"empty\",\n                        next: \"pop\"\n                    }]\n            }, {\n                token: \"keyword.operator\",\n                regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[?:,;.]/\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\noop.inherits(CrystalHighlightRules, TextHighlightRules);\nexports.CrystalHighlightRules = CrystalHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n            if (level == -1)\n                continue;\n            if (line[level] != \"#\")\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        }\n        else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n        if (prevIndent != -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/crystal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/crystal_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/coffee\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = require(\"../range\").Range;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n            var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n            var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n            if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, session, row) {\n        var line = session.getLine(row);\n        if (/}/.test(line))\n            return this.$outdent.autoOutdent(session, row);\n        var indent = this.$getIndent(line);\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine);\n        var tab = session.getTabString();\n        if (prevIndent.length <= indent.length) {\n            if (indent.slice(-tab.length) == tab)\n                session.remove(new Range(row, indent.length - tab.length, row, indent.length));\n        }\n    };\n    this.$id = \"ace/mode/crystal\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/crystal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module"]
}
