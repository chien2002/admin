{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-praat.js"],
  "sourcesContent": ["ace.define(\"ace/mode/praat_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PraatHighlightRules = function () {\n    var keywords = (\"if|then|else|elsif|elif|endif|fi|\" +\n        \"endfor|endproc|\" + // related keywords specified below\n        \"while|endwhile|\" +\n        \"repeat|until|\" +\n        \"select|plus|minus|\" +\n        \"assert|asserterror\");\n    var predefinedVariables = (\"macintosh|windows|unix|\" +\n        \"praatVersion|praatVersion\\\\$\" +\n        \"pi|undefined|\" +\n        \"newline\\\\$|tab\\\\$|\" +\n        \"shellDirectory\\\\$|homeDirectory\\\\$|preferencesDirectory\\\\$|\" +\n        \"temporaryDirectory\\\\$|defaultDirectory\\\\$\");\n    var directives = (\"clearinfo|endSendPraat\");\n    var functions = (\n    \"writeInfo|writeInfoLine|appendInfo|appendInfoLine|info\\\\$|\" +\n        \"writeFile|writeFileLine|appendFile|appendFileLine|\" +\n        \"abs|round|floor|ceiling|min|max|imin|imax|\" +\n        \"sqrt|sin|cos|tan|arcsin|arccos|arctan|arctan2|sinc|sincpi|\" +\n        \"exp|ln|lnBeta|lnGamma|log10|log2|\" +\n        \"sinh|cosh|tanh|arcsinh|arccosh|arctanh|\" +\n        \"sigmoid|invSigmoid|erf|erfc|\" +\n        \"random(?:Uniform|Integer|Gauss|Poisson|Binomial)|\" +\n        \"gaussP|gaussQ|invGaussQ|incompleteGammaP|incompleteBeta|\" +\n        \"chiSquareP|chiSquareQ|invChiSquareQ|studentP|studentQ|invStudentQ|\" +\n        \"fisherP|fisherQ|invFisherQ|\" +\n        \"binomialP|binomialQ|invBinomialP|invBinomialQ|\" +\n        \"hertzToBark|barkToHerz|\" +\n        \"hertzToMel|melToHertz|\" +\n        \"hertzToSemitones|semitonesToHerz|\" +\n        \"erb|hertzToErb|erbToHertz|\" +\n        \"phonToDifferenceLimens|differenceLimensToPhon|\" +\n        \"soundPressureToPhon|\" +\n        \"beta|beta2|besselI|besselK|\" +\n        \"numberOfColumns|numberOfRows|\" +\n        \"selected|selected\\\\$|numberOfSelected|variableExists|\" +\n        \"index|rindex|startsWith|endsWith|\" +\n        \"index_regex|rindex_regex|replace_regex\\\\$|\" +\n        \"length|extractWord\\\\$|extractLine\\\\$|extractNumber|\" +\n        \"left\\\\$|right\\\\$|mid\\\\$|replace\\\\$|\" +\n        \"date\\\\$|fixed\\\\$|percent\\\\$|\" +\n        \"zero#|linear#|randomUniform#|randomInteger#|randomGauss#|\" +\n        \"beginPause|endPause|\" +\n        \"demoShow|demoWindowTitle|demoInput|demoWaitForInput|\" +\n        \"demoClicked|demoClickedIn|demoX|demoY|\" +\n        \"demoKeyPressed|demoKey\\\\$|\" +\n        \"demoExtraControlKeyPressed|demoShiftKeyPressed|\" +\n        \"demoCommandKeyPressed|demoOptionKeyPressed|\" +\n        \"environment\\\\$|chooseReadFile\\\\$|\" +\n        \"chooseDirectory\\\\$|createDirectory|fileReadable|deleteFile|\" +\n        \"selectObject|removeObject|plusObject|minusObject|\" +\n        \"runScript|exitScript|\" +\n        \"beginSendPraat|endSendPraat|\" +\n        \"objectsAreIdentical\");\n    var objectTypes = (\"Activation|AffineTransform|AmplitudeTier|Art|Artword|Autosegment|\" +\n        \"BarkFilter|CCA|Categories|Cepstrum|Cepstrumc|ChebyshevSeries|\" +\n        \"ClassificationTable|Cochleagram|Collection|Configuration|\" +\n        \"Confusion|ContingencyTable|Corpus|Correlation|Covariance|\" +\n        \"CrossCorrelationTable|CrossCorrelationTables|DTW|Diagonalizer|\" +\n        \"Discriminant|Dissimilarity|Distance|Distributions|DurationTier|\" +\n        \"EEG|ERP|ERPTier|Eigen|Excitation|Excitations|ExperimentMFC|FFNet|\" +\n        \"FeatureWeights|Formant|FormantFilter|FormantGrid|FormantPoint|\" +\n        \"FormantTier|GaussianMixture|HMM|HMM_Observation|\" +\n        \"HMM_ObservationSequence|HMM_State|HMM_StateSequence|Harmonicity|\" +\n        \"ISpline|Index|Intensity|IntensityTier|IntervalTier|KNN|KlattGrid|\" +\n        \"KlattTable|LFCC|LPC|Label|LegendreSeries|LinearRegression|\" +\n        \"LogisticRegression|LongSound|Ltas|MFCC|MSpline|ManPages|\" +\n        \"Manipulation|Matrix|MelFilter|MixingMatrix|Movie|Network|\" +\n        \"OTGrammar|OTHistory|OTMulti|PCA|PairDistribution|ParamCurve|\" +\n        \"Pattern|Permutation|Pitch|PitchTier|PointProcess|Polygon|\" +\n        \"Polynomial|Procrustes|RealPoint|RealTier|ResultsMFC|Roots|SPINET|\" +\n        \"SSCP|SVD|Salience|ScalarProduct|Similarity|SimpleString|\" +\n        \"SortedSetOfString|Sound|Speaker|Spectrogram|Spectrum|SpectrumTier|\" +\n        \"SpeechSynthesizer|SpellingChecker|Strings|StringsIndex|Table|\" +\n        \"TableOfReal|TextGrid|TextInterval|TextPoint|TextTier|Tier|\" +\n        \"Transition|VocalTract|Weight|WordList\");\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"string.interpolated\",\n                regex: /'((?:\\.?[a-z][a-zA-Z0-9_.]*)(?:\\$|#|:[0-9]+)?)'/\n            }, {\n                token: [\"text\", \"text\", \"keyword.operator\", \"text\", \"keyword\"],\n                regex: /(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(stopwatch)/\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"string\"],\n                regex: /(^\\s*)(print(?:line|tab)?|echo|exit|pause|send(?:praat|socket)|include|execute|system(?:_nocheck)?)(\\s+)(.*)/\n            }, {\n                token: [\"text\", \"keyword\"],\n                regex: \"(^\\\\s*)(\" + directives + \")$\"\n            }, {\n                token: [\"text\", \"keyword.operator\", \"text\"],\n                regex: /(\\s+)((?:\\+|-|\\/|\\*|<|>)=?|==?|!=|%|\\^|\\||and|or|not)(\\s+)/\n            }, {\n                token: [\"text\", \"text\", \"keyword.operator\", \"text\", \"keyword\", \"text\", \"keyword\"],\n                regex: /(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(?:((?:no)?warn|(?:unix_)?nocheck|noprogress)(\\s+))?((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n                regex: /(^\\s*)((?:no(?:warn|check))?)(\\s*)(\\b(?:editor(?::?)|endeditor)\\b)/\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n                regex: /(^\\s*)(?:(demo)?(\\s+))((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n                regex: /^(\\s*)(?:(demo)(\\s+))?(10|12|14|16|24)$/\n            }, {\n                token: [\"text\", \"support.function\", \"text\"],\n                regex: /(\\s*)(do\\$?)(\\s*:\\s*|\\s*\\(\\s*)/\n            }, {\n                token: \"entity.name.type\",\n                regex: \"(\" + objectTypes + \")\"\n            }, {\n                token: \"variable.language\",\n                regex: \"(\" + predefinedVariables + \")\"\n            }, {\n                token: [\"support.function\", \"text\"],\n                regex: \"((?:\" + functions + \")\\\\$?)(\\\\s*(?::|\\\\())\"\n            }, {\n                token: \"keyword\",\n                regex: /(\\bfor\\b)/,\n                next: \"for\"\n            }, {\n                token: \"keyword\",\n                regex: \"(\\\\b(?:\" + keywords + \")\\\\b)\"\n            }, {\n                token: \"string\",\n                regex: /\"[^\"]*\"/\n            }, {\n                token: \"string\",\n                regex: /\"[^\"]*$/,\n                next: \"brokenstring\"\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"entity.name.section\"],\n                regex: /(^\\s*)(\\bform\\b)(\\s+)(.*)/,\n                next: \"form\"\n            }, {\n                token: \"constant.numeric\",\n                regex: /\\b[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/\n            }, {\n                token: [\"keyword\", \"text\", \"entity.name.function\"],\n                regex: /(procedure)(\\s+)([^:\\s]+)/\n            }, {\n                token: [\"entity.name.function\", \"text\"],\n                regex: /(@\\S+)(:|\\s*\\()/\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"entity.name.function\"],\n                regex: /(^\\s*)(call)(\\s+)(\\S+)/\n            }, {\n                token: \"comment\",\n                regex: /(^\\s*#|;).*$/\n            }, {\n                token: \"text\",\n                regex: /\\s+/\n            }\n        ],\n        \"form\": [\n            {\n                token: [\"keyword\", \"text\", \"constant.numeric\"],\n                regex: /((?:optionmenu|choice)\\s+)(\\S+:\\s+)([0-9]+)/\n            }, {\n                token: [\"keyword\", \"constant.numeric\"],\n                regex: /((?:option|button)\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/\n            }, {\n                token: [\"keyword\", \"string\"],\n                regex: /((?:option|button)\\s+)(.*)/\n            }, {\n                token: [\"keyword\", \"text\", \"string\"],\n                regex: /((?:sentence|text)\\s+)(\\S+\\s*)(.*)/\n            }, {\n                token: [\"keyword\", \"text\", \"string\", \"invalid.illegal\"],\n                regex: /(word\\s+)(\\S+\\s*)(\\S+)?(\\s.*)?/\n            }, {\n                token: [\"keyword\", \"text\", \"constant.language\"],\n                regex: /(boolean\\s+)(\\S+\\s*)(0|1|\"?(?:yes|no)\"?)/\n            }, {\n                token: [\"keyword\", \"text\", \"constant.numeric\"],\n                regex: /((?:real|natural|positive|integer)\\s+)(\\S+\\s*)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/\n            }, {\n                token: [\"keyword\", \"string\"],\n                regex: /(comment\\s+)(.*)/\n            }, {\n                token: \"keyword\",\n                regex: 'endform',\n                next: \"start\"\n            }\n        ],\n        \"for\": [\n            {\n                token: [\"keyword\", \"text\", \"constant.numeric\", \"text\"],\n                regex: /(from|to)(\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?)(\\s*)/\n            }, {\n                token: [\"keyword\", \"text\"],\n                regex: /(from|to)(\\s+\\S+\\s*)/\n            }, {\n                token: \"text\",\n                regex: /$/,\n                next: \"start\"\n            }\n        ],\n        \"brokenstring\": [\n            {\n                token: [\"text\", \"string\"],\n                regex: /(\\s*\\.{3})([^\"]*)/\n            }, {\n                token: \"string\",\n                regex: /\"/,\n                next: \"start\"\n            }\n        ]\n    };\n};\noop.inherits(PraatHighlightRules, TextHighlightRules);\nexports.PraatHighlightRules = PraatHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/praat\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/praat_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PraatHighlightRules = require(\"./praat_highlight_rules\").PraatHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = PraatHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/praat\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/praat\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module"]
}
