{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/mode-rust.js"],
  "sourcesContent": ["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [{\n                token: \"comment.doc.tag\",\n                regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n            },\n            DocCommentHighlightRules.getTagRule(),\n            {\n                defaultToken: \"comment.doc\",\n                caseInsensitive: true\n            }]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\",\n        regex: \"\\\\/\\\\*(?=\\\\*)\",\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\",\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/rust_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/doc_comment_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.github.com/dbp/sublime-rust/master/Rust.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\nvar wordPattern = /[a-zA-Z_\\xa1-\\uffff][a-zA-Z0-9_\\xa1-\\uffff]*/.source;\nvar RustHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.source.rust\": \"abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|\"\n            + \"default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|\"\n            + \"override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|\"\n            + \"unsafe|unsized|use|virtual|where|while|yield|try\",\n        \"storage.type.source.rust\": \"Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|\"\n            + \"i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|\"\n            + \"c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|\"\n            + \"uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t\",\n        \"constant.language.source.rust\": \"true|false|Some|None|Ok|Err|FALSE|TRUE\",\n        \"support.constant.source.rust\": \"EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|\"\n            + \"_IONBF|_IOLBF|\"\n            + \"BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|\"\n            + \"S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|\"\n            + \"F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO\",\n        \"constant.language\": \"macro_rules|mac_variant\"\n    }, \"identifier\");\n    this.$rules = {\n        start: [\n            {\n                token: 'variable.other.source.rust',\n                regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n            }, {\n                token: 'string.quoted.single.source.rust',\n                regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\"\n            }, {\n                token: 'identifier',\n                regex: \"r#\" + wordPattern + \"\\\\b\"\n            }, {\n                stateName: \"bracketedComment\",\n                onMatch: function (value, currentState, stack) {\n                    stack.unshift(this.next, value.length - 1, currentState);\n                    return \"string.quoted.raw.source.rust\";\n                },\n                regex: /r#*\"/,\n                next: [\n                    {\n                        onMatch: function (value, currentState, stack) {\n                            var token = \"string.quoted.raw.source.rust\";\n                            if (value.length >= stack[1]) {\n                                if (value.length > stack[1])\n                                    token = \"invalid\";\n                                stack.shift();\n                                stack.shift();\n                                this.next = stack.shift();\n                            }\n                            else {\n                                this.next = \"\";\n                            }\n                            return token;\n                        },\n                        regex: /\"#*/,\n                        next: \"start\"\n                    }, {\n                        defaultToken: \"string.quoted.raw.source.rust\"\n                    }\n                ]\n            }, {\n                token: 'string.quoted.double.source.rust',\n                regex: '\"',\n                push: [\n                    {\n                        token: 'string.quoted.double.source.rust',\n                        regex: '\"',\n                        next: 'pop'\n                    }, {\n                        token: 'constant.character.escape.source.rust',\n                        regex: stringEscape\n                    }, { defaultToken: 'string.quoted.double.source.rust' }\n                ]\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust', 'punctuation'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')(<)',\n                push: \"generics\"\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')'\n            }, {\n                token: ['support.constant', \"punctuation\"],\n                regex: \"(\" + wordPattern + '::)(<)',\n                push: \"generics\"\n            }, {\n                token: 'support.constant',\n                regex: wordPattern + '::'\n            }, {\n                token: 'variable.language.source.rust',\n                regex: '\\\\bself\\\\b'\n            }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n                token: 'comment.line.doc.source.rust',\n                regex: '///.*$'\n            }, {\n                token: 'comment.line.doc.source.rust',\n                regex: '//!.*$'\n            }, {\n                token: 'comment.line.double-dash.source.rust',\n                regex: '//.*$'\n            }, {\n                token: 'comment.start.block.source.rust',\n                regex: '/\\\\*',\n                stateName: 'comment',\n                push: [\n                    {\n                        token: 'comment.start.block.source.rust',\n                        regex: '/\\\\*',\n                        push: 'comment'\n                    }, {\n                        token: 'comment.end.block.source.rust',\n                        regex: '\\\\*/',\n                        next: 'pop'\n                    }, { defaultToken: 'comment.block.source.rust' }\n                ]\n            }, {\n                token: [\"keyword.source.rust\", \"identifier\", \"punctuaction\"],\n                regex: \"(?:(impl)|(\" + wordPattern + \"))(<)\",\n                stateName: 'generics',\n                push: [\n                    {\n                        token: \"punctuaction\",\n                        regex: \"<\",\n                        push: \"generics\"\n                    }, {\n                        token: 'variable.other.source.rust',\n                        regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n                    }, {\n                        token: \"storage.type.source.rust\",\n                        regex: \"\\\\b(u8|u16|u32|u64|u128|usize|i8|i16|i32|i64|i128|isize|char|bool)\\\\b\"\n                    }, {\n                        token: \"punctuation.operator\",\n                        regex: \"[,:]\"\n                    }, {\n                        token: \"keyword\",\n                        regex: \"\\\\b(?:const|dyn)\\\\b\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: \">\",\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.lparen\",\n                        regex: \"[(]\"\n                    }, {\n                        token: \"paren.rparen\",\n                        regex: \"[)]\"\n                    }, {\n                        token: \"identifier\",\n                        regex: \"\\\\b\" + wordPattern + \"\\\\b\"\n                    }, {\n                        token: 'keyword.operator',\n                        regex: \"=\"\n                    }\n                ]\n            }, {\n                token: keywordMapper,\n                regex: wordPattern\n            }, {\n                token: 'keyword.operator',\n                regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[?:,;.]/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[\\[({]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\])}]/\n            }, {\n                token: 'meta.preprocessor.source.rust',\n                regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b'\n            }, {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/\n            }, {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n};\nRustHighlightRules.metaData = { fileTypes: ['rs', 'rc'],\n    foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n    foldingStopMarker: '^\\\\s*\\\\}',\n    name: 'Rust',\n    scopeName: 'source.rust' };\noop.inherits(RustHighlightRules, TextHighlightRules);\nexports.RustHighlightRules = RustHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/rust\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/rust_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\", nestable: true };\n    this.$quotes = { '\"': '\"' };\n    this.$id = \"ace/mode/rust\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/rust\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module"]
}
